using UnityEngine;
using System.Collections.Generic;

public class RRT : MonoBehaviour
{
    public Transform start; // Начальная позиция
    public Transform goal; // Цель
    public LayerMask obstacleMask; // Слои препятствий
    public float stepSize = 1f; // Размер шага
    public float moveSpeed = 5f; // Скорость перемещения
    public int maxIterations = 5000; // Максимальное количество итераций

    private List<Vector3> nodes = new List<Vector3>(); // Список узлов дерева
    private List<Vector3> path = new List<Vector3>(); // Путь к цели
    private bool isRunning = false; // Флаг, определяющий, идет ли процесс поиска пути

    private int currentPathIndex = 0; // Индекс текущей точки в пути

    void Start()
    {
        FindPath();
    }

    void FindPath()
    {
        isRunning = true;

        nodes.Clear();
        nodes.Add(start.position);

        int iterations = 0;

        while (iterations < maxIterations)
        {
            Vector3 randomPoint = GetRandomPoint();
            Vector3 nearestNode = GetNearestNode(randomPoint);
            Vector3 newNode = MoveTowards(nearestNode, randomPoint, stepSize);

            if (!ObstacleInPath(nearestNode, newNode))
            {
                nodes.Add(newNode);

                if (Vector3.Distance(newNode, goal.position) < stepSize)
                {
                    path = ConstructPath();
                    break;
                }
            }

            iterations++;
        }

        isRunning = false;
    }

    Vector3 GetRandomPoint()
    {
        // Генерируем случайную точку в пространстве
        Vector3 randomPoint = new Vector3(Random.Range(-50f, 50f), 0f, Random.Range(-50f, 50f));
        return randomPoint;
    }

    Vector3 GetNearestNode(Vector3 point)
    {
        // Находим ближайший узел в дереве к заданной точке
        float minDist = Mathf.Infinity;
        Vector3 nearestNode = Vector3.zero;

        foreach (Vector3 node in nodes)
        {
            float dist = Vector3.Distance(node, point);
            if (dist < minDist)
            {
                minDist = dist;
                nearestNode = node;
            }
        }

        return nearestNode;
    }

    Vector3 MoveTowards(Vector3 from, Vector3 to, float maxDistance)
    {
        // Двигаемся от точки from к точке to не дальше, чем maxDistance
        Vector3 direction = to - from;
        float distance = Mathf.Min(maxDistance, direction.magnitude);
        return from + direction.normalized * distance;
    }

    bool ObstacleInPath(Vector3 from, Vector3 to)
    {
        // Проверяем, есть ли препятствие на пути от точки from к точке to
        Vector3 direction = to - from;
        RaycastHit hit;

        if (Physics.Raycast(from, direction, out hit, direction.magnitude, obstacleMask))
        {
            return true;
        }

        return false;
    }

    List<Vector3> ConstructPath()
    {
        // Строим путь от начала к цели
        List<Vector3> path = new List<Vector3>();
        path.Add(goal.position);

        Vector3 currentNode = goal.position;
        while (currentNode != start.position)
        {
            foreach (Vector3 node in nodes)
            {
                if (Vector3.Distance(node, currentNode) < stepSize)
                {
                    path.Insert(0, node);
                    currentNode = node;
                    break;
                }
            }
        }

        return path;
    }

    void Update()
    {
        if (!isRunning && path.Count > 0)
        {
            MoveAlongPath();
        }
    }

    void MoveAlongPath()
    {
        if (currentPathIndex >= path.Count)
        {
            return;
        }

        Vector3 targetPosition = path[currentPathIndex];
        targetPosition.y = transform.position.y;

        transform.position = Vector3.MoveTowards(transform.position, targetPosition, moveSpeed * Time.deltaTime);

        if (transform.position == targetPosition)
        {
            currentPathIndex++;
        }
    }

    void OnDrawGizmos()
    {
        // Отрисовываем путь
        Gizmos.color = Color.blue;
        for (int i = 0; i < path.Count - 1; i++)
        {
            Gizmos.DrawLine(path[i], path[i + 1]);
        }

        // Отрисовываем узлы
        Gizmos.color = Color.green;
        foreach (Vector3 node in nodes)
        {
            Gizmos.DrawSphere(node, 0.5f);
        }

        // Отрисовываем старт и финиш
        Gizmos.color = Color.red;
        Gizmos.DrawSphere(start.position, 0.5f);
        Gizmos.DrawSphere(goal.position, 0.5f);
    }
}
