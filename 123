using UnityEngine;
using System.Collections.Generic;

public class SLAMSimulation : MonoBehaviour
{
    public float moveSpeed = 5f;
    public float obstacleDetectionRange = 1.5f;
    public LayerMask obstacleMask;
    public Transform finishPoint;

    private List<Obstacle> obstaclesDetected = new List<Obstacle>();

    void Update()
    {
        MoveCube();

        DetectObstacles();
    }

    void MoveCube()
    {
        float horizontalInput = Input.GetAxis("Horizontal");
        float verticalInput = Input.GetAxis("Vertical");

        Vector3 moveDirection = new Vector3(horizontalInput, 0, verticalInput).normalized;
        transform.Translate(moveDirection * moveSpeed * Time.deltaTime);
    }

    void DetectObstacles()
    {
        // Clear the list of detected obstacles
        obstaclesDetected.Clear();

        // Cast rays around the cube to detect obstacles
        RaycastHit hit;
        Vector3[] directions = { transform.forward, transform.right, -transform.forward, -transform.right };
        foreach (Vector3 direction in directions)
        {
            if (Physics.Raycast(transform.position, direction, out hit, obstacleDetectionRange, obstacleMask))
            {
                Obstacle obstacle = new Obstacle(hit.point, hit.normal);
                obstaclesDetected.Add(obstacle);
            }
        }
    }

    void OnDrawGizmos()
    {
        // Draw detected obstacles
        Gizmos.color = Color.red;
        foreach (Obstacle obstacle in obstaclesDetected)
        {
            Gizmos.DrawSphere(obstacle.position, 0.2f);
        }
    }

    void OnTriggerEnter(Collider other)
    {
        if (other.transform == finishPoint)
        {
            // Finish reached, print map information
            Debug.Log("SLAM Simulation Finished");
            foreach (Obstacle obstacle in obstaclesDetected)
            {
                Debug.Log("Obstacle position: " + obstacle.position + ", Normal: " + obstacle.normal);
            }
        }
    }

    public class Obstacle
    {
        public Vector3 position;
        public Vector3 normal;

        public Obstacle(Vector3 position, Vector3 normal)
        {
            this.position = position;
            this.normal = normal;
        }
    }
}
