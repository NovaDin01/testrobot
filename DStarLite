using UnityEngine;
using System.Collections.Generic;

public class DStarLite : MonoBehaviour
{
    public Transform start;
    public Transform goal;
    public LayerMask obstacleMask;
    public float nodeSize = 1f;

    private List<Node> path;

    void Start()
    {
        FindPath(start.position, goal.position);
    }

    void FindPath(Vector3 startPos, Vector3 targetPos)
    {
        Node startNode = new Node(GridPosFromWorldPos(startPos));
        Node targetNode = new Node(GridPosFromWorldPos(targetPos));

        List<Node> openSet = new List<Node>();
        HashSet<Node> closedSet = new HashSet<Node>();

        openSet.Add(startNode);

        while (openSet.Count > 0)
        {
            Node currentNode = openSet[0];
            for (int i = 1; i < openSet.Count; i++)
            {
                if (openSet[i].fCost < currentNode.fCost || openSet[i].fCost == currentNode.fCost && openSet[i].hCost < currentNode.hCost)
                {
                    currentNode = openSet[i];
                }
            }

            openSet.Remove(currentNode);
            closedSet.Add(currentNode);

            if (currentNode == targetNode)
            {
                RetracePath(startNode, targetNode);
                return;
            }

            foreach (Node neighbor in GetNeighbors(currentNode))
            {
                if (closedSet.Contains(neighbor))
                    continue;

                float newMovementCostToNeighbor = currentNode.gCost + GetDistance(currentNode, neighbor);
                if (newMovementCostToNeighbor < neighbor.gCost || !openSet.Contains(neighbor))
                {
                    neighbor.gCost = newMovementCostToNeighbor;
                    neighbor.hCost = GetDistance(neighbor, targetNode);
                    neighbor.parent = currentNode;

                    if (!openSet.Contains(neighbor))
                        openSet.Add(neighbor);
                }
            }
        }
    }

    void RetracePath(Node startNode, Node endNode)
    {
        List<Node> path = new List<Node>();
        Node currentNode = endNode;

        while (currentNode != startNode)
        {
            path.Add(currentNode);
            currentNode = currentNode.parent;
        }
        path.Reverse();
        this.path = path;

        // Move along the path
        StartCoroutine(FollowPath());
    }

    IEnumerator FollowPath()
    {
        foreach (Node node in path)
        {
            Vector3 nextPos = WorldPosFromGridPos(new Vector2Int(node.gridX, node.gridY));
            while (Vector3.Distance(transform.position, nextPos) > 0.05f)
            {
                transform.position = Vector3.MoveTowards(transform.position, nextPos, Time.deltaTime * 5f);
                yield return null;
            }
        }
    }

    List<Node> GetNeighbors(Node node)
    {
        List<Node> neighbors = new List<Node>();

        for (int x = -1; x <= 1; x++)
        {
            for (int y = -1; y <= 1; y++)
            {
                if (x == 0 && y == 0)
                    continue;

                Vector2Int neighborPos = new Vector2Int(node.gridX + x, node.gridY + y);
                if (IsNodeWalkable(neighborPos))
                {
                    neighbors.Add(new Node(neighborPos));
                }
            }
        }

        return neighbors;
    }

    bool IsNodeWalkable(Vector2Int pos)
    {
        Vector3 worldPos = WorldPosFromGridPos(pos);
        return !Physics.CheckSphere(worldPos, nodeSize / 2, obstacleMask);
    }

    float GetDistance(Node nodeA, Node nodeB)
    {
        int dstX = Mathf.Abs(nodeA.gridX - nodeB.gridX);
        int dstY = Mathf.Abs(nodeA.gridY - nodeB.gridY);
        return dstX + dstY; // Manhattan distance
    }

    Vector2Int GridPosFromWorldPos(Vector3 worldPos)
    {
        return new Vector2Int(Mathf.FloorToInt(worldPos.x / nodeSize), Mathf.FloorToInt(worldPos.z / nodeSize));
    }

    Vector3 WorldPosFromGridPos(Vector2Int gridPos)
    {
        return new Vector3(gridPos.x * nodeSize + nodeSize / 2, 0, gridPos.y * nodeSize + nodeSize / 2);
    }

    void OnDrawGizmos()
    {
        Gizmos.color = Color.blue;
        Gizmos.DrawWireCube(start.position, Vector3.one * nodeSize);

        Gizmos.color = Color.red;
        Gizmos.DrawWireCube(goal.position, Vector3.one * nodeSize);

        if (path != null)
        {
            foreach (Node node in path)
            {
                Vector3 nodePos = WorldPosFromGridPos(new Vector2Int(node.gridX, node.gridY));
                Gizmos.color = Color.white;
                Gizmos.DrawCube(nodePos, Vector3.one * (nodeSize - 0.1f));
            }
        }
    }

    public class Node
    {
        public int gridX;
        public int gridY;
        public float gCost;
        public float hCost;
        public Node parent;

        public Node(Vector2Int pos)
        {
            gridX = pos.x;
            gridY = pos.y;
        }

        public float fCost
        {
            get { return gCost + hCost; }
        }
    }
}
