using System.Collections.Generic;
using UnityEngine;

public class DStarLite : MonoBehaviour
{
    public Transform startPoint; // Начальная точка
    public Transform goalPoint; // Конечная точка
    public LayerMask obstacleMask; // Маска препятствий
    public float obstacleCheckDistance = 1f; // Расстояние между проверками препятствий
    public float movementSpeed = 2f; // Скорость движения

    private List<Node> path;
    private int currentNodeIndex = 0;
    private bool isMoving = false;

    void Start()
    {
        path = FindPath(startPoint.position, goalPoint.position);
        if (path != null && path.Count > 0)
        {
            isMoving = true;
        }
    }

    void Update()
    {
        if (isMoving)
        {
            MoveToNextNode();
        }
    }

    void MoveToNextNode()
    {
        Vector3 nextPosition = path[currentNodeIndex].position;

        // Проверяем, нет ли препятствий на пути к следующему узлу
        if (!IsObstacleInPath(transform.position, nextPosition))
        {
            Vector3 direction = (nextPosition - transform.position).normalized;
            transform.position += direction * movementSpeed * Time.deltaTime;

            // Проверка, достиг ли кубик следующего узла
            if (Vector3.Distance(transform.position, nextPosition) < 0.1f)
            {
                currentNodeIndex++;

                // Проверка, достиг ли кубик конечной точки
                if (currentNodeIndex >= path.Count)
                {
                    isMoving = false;
                    Debug.Log("Путь завершен");
                }
            }
        }
        else
        {
            Debug.Log("Препятствие на пути!");
        }
    }

    // Проверка, есть ли препятствия на пути от start до end
    bool IsObstacleInPath(Vector3 start, Vector3 end)
    {
        RaycastHit hit;
        if (Physics.Raycast(start, end - start, out hit, Vector3.Distance(start, end), obstacleMask))
        {
            return true; // Препятствие обнаружено
        }
        return false; // Препятствие не обнаружено
    }

    List<Node> FindPath(Vector3 start, Vector3 goal)
    {
        // TODO: Реализовать алгоритм D* Lite

        List<Node> newPath = new List<Node>();
        // Временно, для примера, используем простой путь от старта до цели
        newPath.Add(new Node(start));
        newPath.Add(new Node(goal));
        return newPath;
    }

    // Проверка, является ли позиция препятствием
    bool IsObstacle(Vector3 position)
    {
        return Physics.CheckSphere(position, obstacleCheckDistance, obstacleMask);
    }

    // Вспомогательный класс для представления узла (позиции)
    public class Node
    {
        public Vector3 position;

        public Node(Vector3 _position)
        {
            position = _position;
        }
    }
}
